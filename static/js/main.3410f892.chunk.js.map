{"version":3,"sources":["components/TodoApp.js","components/Todo.js","components/TodoList.js","components/TodosFilter.js","App.js","index.js"],"names":["TodoApp","React","memo","onAddNewTodo","useState","title","setTitle","type","className","placeholder","value","onChange","e","target","onKeyPress","key","newTodo","id","Date","completed","preventDefault","Todo","todo","onChangeCompleted","onChangeTitle","onDestroy","isEditable","setIsEditable","newTitle","setNewTitle","saveTitle","trim","classNames","editing","checked","onDoubleClick","onClick","onKeyUp","onBlur","ref","input","focus","TodoList","todos","map","TodosFilter","onswitchFilter","FILTERS","filter","href","selected","all","active","propTypes","PropTypes","func","isRequired","shape","string","App","todosList","localStorage","JSON","parse","allDone","setAllDone","setFilter","setTodos","useEffect","stringify","changeCompleted","a","updatedTodos","clearCompleted","visible","useCallback","items","itemsLeft","length","visibleTodos","useMemo","prevTodos","htmlFor","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3410f892.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoApp = React.memo(({ onAddNewTodo }) => {\n  const [title, setTitle] = useState('');\n\n  const submitTitle = (e) => {\n    if (e.key === 'Enter') {\n      if (title !== '') {\n        const newTodo = {\n          id: +new Date(),\n          title,\n          completed: false,\n        };\n\n        onAddNewTodo(newTodo);\n        setTitle('');\n      }\n\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <form>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={e => setTitle(e.target.value)}\n        onKeyPress={submitTitle}\n      />\n    </form>\n  );\n});\n\nTodoApp.propTypes = {\n  onAddNewTodo: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Todo = React.memo(\n  ({ todo, onChangeCompleted, onChangeTitle, onDestroy }) => {\n    const [isEditable, setIsEditable] = useState(false);\n    const [newTitle, setNewTitle] = useState(todo.title);\n\n    const saveTitle = () => {\n      if (newTitle.trim() === todo.title.trim()) {\n        setIsEditable(false);\n\n        return;\n      }\n\n      if (newTitle.trim() === '') {\n        setNewTitle(todo.title);\n        setIsEditable(false);\n\n        return;\n      }\n\n      onChangeTitle(todo.id, newTitle);\n      setIsEditable(false);\n    };\n\n    const saveCancelTitle = (e) => {\n      e.preventDefault();\n      if (e.key === 'Enter') {\n        saveTitle();\n        e.preventDefault();\n      }\n\n      if (e.key === 'Escape') {\n        setNewTitle(todo.title);\n        setIsEditable(false);\n      }\n    };\n\n    return (\n      <li\n        className={classNames({ completed: todo.completed,\n          editing: isEditable })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={todo.completed}\n            onChange={e => onChangeCompleted(todo.id, e.target.checked)}\n          />\n          <label\n            onDoubleClick={(e) => {\n              setIsEditable(true);\n              e.preventDefault();\n            }}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => onDestroy(todo.id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={newTitle}\n          onChange={e => setNewTitle(e.target.value)}\n          onKeyUp={saveCancelTitle}\n          onBlur={saveTitle}\n          ref={(input) => {\n            if (input !== null) {\n              input.focus();\n            }\n          }}\n        />\n      </li>\n    );\n  },\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onChangeCompleted: PropTypes.func.isRequired,\n  onChangeTitle: PropTypes.func.isRequired,\n  onDestroy: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from './Todo';\n\nexport const TodoList = (\n  { todos, onChangeCompleted, onChangeTitle, onDestroy },\n) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        onChangeCompleted={onChangeCompleted}\n        onChangeTitle={onChangeTitle}\n        onDestroy={onDestroy}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  onChangeCompleted: PropTypes.func.isRequired,\n  onChangeTitle: PropTypes.func.isRequired,\n  onDestroy: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodosFilter = React.memo(({ onswitchFilter, FILTERS, filter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({ selected: filter === FILTERS.all })}\n        onClick={() => onswitchFilter(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({ selected: filter === FILTERS.active })}\n        onClick={() => onswitchFilter(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({ selected: filter === FILTERS.completed })}\n        onClick={() => onswitchFilter(FILTERS.completed)}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n));\n\nTodosFilter.propTypes = {\n  onswitchFilter: PropTypes.func.isRequired,\n  FILTERS: PropTypes.shape({\n    all: PropTypes.string.isRequired,\n    active: PropTypes.string.isRequired,\n    completed: PropTypes.string.isRequired,\n  }).isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useCallback, useMemo, useState, useEffect } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  const FILTERS = {\n    all: 'all',\n    active: 'active',\n    completed: 'completed',\n  };\n\n  // eslint-disable-next-line max-len\n  const todosList = localStorage.todosList ? JSON.parse(localStorage.todosList) : [];\n\n  const [allDone, setAllDone] = useState(false);\n  const [filter, setFilter] = useState(FILTERS.all);\n  const [todos, setTodos] = useState(todosList);\n\n  useEffect(() => {\n    localStorage.todosList = JSON.stringify(todos);\n  });\n\n  const switchFilter = (status) => {\n    if (filter === status) {\n      return;\n    }\n\n    setFilter(status);\n  };\n\n  const addNewTodo = (newTodo) => {\n    setTodos(prevTodos => [...prevTodos, newTodo]);\n  };\n\n  const changeCompleted = async(id, completed) => {\n    const updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo,\n          completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  const changeTitle = (id, title) => {\n    const updatedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo,\n          title };\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  const clearCompleted = async() => {\n    const updatedTodos = todos.filter(todo => !todo.completed);\n\n    setTodos(updatedTodos);\n  };\n\n  const visible = useCallback((items) => {\n    switch (filter) {\n      case FILTERS.active:\n        return items.filter(todo => !todo.completed);\n\n      case FILTERS.completed:\n        return items.filter(todo => todo.completed);\n\n      default:\n        return items;\n    }\n  }, [filter, FILTERS.active, FILTERS.completed]);\n\n  const itemsLeft = todos.filter(todo => !todo.completed).length;\n  const visibleTodos = useMemo(() => visible(todos), [todos, visible]);\n\n  const toggleAll = (e) => {\n    setAllDone(e.target.checked);\n    const updatedTodos = todos.map(todo => ({ ...todo,\n      completed: e.target.checked }));\n\n    setTodos(updatedTodos);\n  };\n\n  useEffect(() => {\n    if (itemsLeft === 0) {\n      setAllDone(true);\n    } else {\n      setAllDone(false);\n    }\n  }, [todos, itemsLeft]);\n\n  const destroy = (id) => {\n    const updatedTodos = todos.filter(todo => todo.id !== id);\n\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <TodoApp\n          onAddNewTodo={addNewTodo}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={allDone}\n          onChange={toggleAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={visibleTodos}\n          onChangeCompleted={changeCompleted}\n          onChangeTitle={changeTitle}\n          onDestroy={destroy}\n        />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {itemsLeft}\n          </span>\n\n          <TodosFilter\n            onswitchFilter={switchFilter}\n            FILTERS={FILTERS}\n            filter={filter}\n          />\n\n            {todos.length - itemsLeft > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n            )}\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}